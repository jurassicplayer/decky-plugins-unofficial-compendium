name: Update Store Data
on:
  schedule:
  - cron: "0 2 * * 1"
  workflow_dispatch:

jobs:
  query_store:
    runs-on: ubuntu-latest
    outputs:
      isNew: ${{ steps.compare.outputs.isNew }}
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: Hash local store data
        run: echo "STORE_SHA=$(sha256sum docs/_data/store.json)" >> $GITHUB_ENV
      - name: Poll and hash fresh store data
        run: |
          curl https://plugins.deckbrew.xyz/plugins | jq 'walk(if type == "object" then with_entries(select(.key | test("id") or test("downloads") or test("updates") | not)) else . end)' > docs/_data/store.json
          echo "NEW_STORE_SHA=$(sha256sum docs/_data/store.json)" >> $GITHUB_ENV
      - name: Compare hashes
        id: compare
        run: |
          if [[ "$STORE_SHA" != "$NEW_STORE_SHA" ]]; then
            echo "isNew=true" >> $GITHUB_OUTPUT
          fi
      - name: Load local store data
        id: set-matrix
        run: echo "matrix=$(jq -c . < docs/_data/store.json)" >> $GITHUB_OUTPUT
  update_or_create_pages:
    needs: query_store
    runs-on: ubuntu-latest
    strategy:
      matrix:
        plugin: ${{ fromJson(needs.query_store.outputs.matrix) }}
    steps:
      - name: Handle if new ${{ matrix.plugin.name }} page
        run: |
          if [ ! -f "docs/_plugins/${{ matrix.plugin.name }}.md" ]; then
            echo `---` >> "docs/_plugins/${{ matrix.plugin.name }}.md"
            echo `layout: plugin` >> "docs/_plugins/${{ matrix.plugin.name }}.md"
            echo `name: ${{ matrix.plugin.name }}` >> "docs/_plugins/${{ matrix.plugin.name }}.md"
            echo `description: ${{ matrix.plugin.description }}` >> "docs/_plugins/${{ matrix.plugin.name }}.md"
            echo `tags: ${{ matrix.plugin.tags }}` >> "docs/_plugins/${{ matrix.plugin.name }}.md"
            echo `versions: ${{ matrix.plugin.versions }}` >> "docs/_plugins/${{ matrix.plugin.name }}.md"
            echo `image_url: ${{ matrix.plugin.image_url }}` >> "docs/_plugins/${{ matrix.plugin.name }}.md"
            echo `created: ${{ matrix.plugin.created }}` >> "docs/_plugins/${{ matrix.plugin.name }}.md"
            echo `updated: ${{ matrix.plugin.updated }}` >> "docs/_plugins/${{ matrix.plugin.name }}.md"
            echo `package_name: ` >> "docs/_plugins/${{ matrix.plugin.name }}.md"
            echo `project_url: ` >> "docs/_plugins/${{ matrix.plugin.name }}.md"
            echo `category: Active` >> "docs/_plugins/${{ matrix.plugin.name }}.md"
            echo `available_in_store: True` >> "docs/_plugins/${{ matrix.plugin.name }}.md"
            echo `---` >> "docs/_plugins/${{ matrix.plugin.name }}.md"
            echo `{\% assign store = site.data.store | where: "name", page.name | first \%}` >> "docs/_plugins/${{ matrix.plugin.name }}.md"
            echo Generated new ${{ matrix.plugin.name }} page
          fi
      # - name: Check if ${{ matrix.plugin.name }} has new data
      #   if: ${{ steps.check-if-new.outputs.${{ matrix.plugin.name }}_isNew != true }}
      #   id: check-if-update
      #   run: |
            # echo Check if the plugin metadata matches the store data or not
      # - name: Update or create ${{ matrix.plugin.name }} page
      #   run: |
      #     if [ -f "docs/_plugins/${{ matrix.plugin.name }}.md" ]; then
      #       sed -i 's/description:.*/description: ${{ matrix.plugin.description }}/g' "docs/_plugins/${{ matrix.plugin.name }}.md"
      #       sed -i 's/tags:.*/tags: ${{ matrix.plugin.tags }}/g' "docs/_plugins/${{ matrix.plugin.name }}.md"
      #       sed -i 's/versions:.*/versions: ${{ matrix.plugin.versions }}/g' "docs/_plugins/${{ matrix.plugin.name }}.md"
      #       sed -i 's/image_url:.*/image_url: ${{ matrix.plugin.image_url }}/g' "docs/_plugins/${{ matrix.plugin.name }}.md"
      #       sed -i 's/created:.*/created: ${{ matrix.plugin.created }}/g' "docs/_plugins/${{ matrix.plugin.name }}.md"
      #       sed -i 's/updated:.*/updated: ${{ matrix.plugin.updated }}/g' "docs/_plugins/${{ matrix.plugin.name }}.md"
      #       echo Updated ${{ matrix.plugin.name }} page
      #     else
      #       cat >"docs/_plugins/${{ matrix.plugin.name }}.md" <<EOL
      #       ---
      #       layout: plugin
      #       name: ${{ matrix.plugin.name }}
      #       description: ${{ matrix.plugin.description }}
      #       tags: ${{ matrix.plugin.tags }}
      #       versions: ${{ matrix.plugin.versions }}
      #       image_url: ${{ matrix.plugin.image_url }}
      #       created: ${{ matrix.plugin.created }}
      #       updated: ${{ matrix.plugin.updated }}
      #       package_name: 
      #       project_url: 
      #       category: Active
      #       available_in_store: True
      #       ---
      #       {\% assign store = site.data.store | where: "name", page.name | first \%}
      #       EOL
      #       echo Generated new ${{ matrix.plugin.name }} page
      #     fi
      - name: Upload page artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.plugin.name }}
          path: docs/_plugins/${{ matrix.plugin.name }}.md
          

  # create_pr:
  #   needs: update_or_create_pages
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Create or Update Pull Request
  #       if: ${{ steps.update_or_create_pages.outputs.isNew == 'true' }}
  #       uses: gr2m/create-or-update-pull-request-action@v1.10.1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         branch: "workflows-update-store"
  #         commit-message: "chore: update store.json"
  #         auto-merge: merge
  #         labels: automerge
  #         update-pull-request-title-and-body: true
      
