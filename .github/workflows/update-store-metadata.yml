name: Update Store Data
on:
  schedule:
  - cron: "0 2 * * 1"
  workflow_dispatch:

jobs:
  query_store:
    runs-on: ubuntu-latest
    outputs:
      isNew: ${{ steps.compare.outputs.isNew }}
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: Hash local store data
        run: echo "STORE_SHA=$(sha256sum docs/_data/store.json)" >> $GITHUB_ENV
      - name: Poll and hash fresh store data
        run: |
          curl https://plugins.deckbrew.xyz/plugins | jq 'walk(if type == "object" then with_entries(select(.key | test("id") or test("downloads") or test("updates") | not)) else . end)' > docs/_data/store.json
          echo "NEW_STORE_SHA=$(sha256sum docs/_data/store.json)" >> $GITHUB_ENV
      - name: Compare hashes
        id: compare
        run: |
          if [[ "$STORE_SHA" != "$NEW_STORE_SHA" ]]; then
            echo "isNew=true" >> $GITHUB_OUTPUT
          fi
      - name: Load local store data
        id: set-matrix
        if: ${{ steps.compare.outputs.isNew }}
        run: echo "matrix=$(jq -c . < docs/_data/store.json)" >> $GITHUB_OUTPUT
      - name: Upload store artifact
        if: ${{ steps.compare.outputs.isNew }}
        uses: actions/upload-artifact@v4
        with:
          name: store.json
          path: docs/_data/store.json
  update_or_create_pages:
    needs: query_store
    runs-on: ubuntu-latest
    strategy:
      matrix:
        plugin: ${{ fromJson(needs.query_store.outputs.matrix) }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: Check local for ${{ matrix.plugin.name }} page
        id: check_local
        run: |
          if [ ! -f "docs/_plugins/${{ matrix.plugin.name }}.md" ]; then
            echo "isNew=true" >> $GITHUB_OUTPUT
          fi
      - name: Create new ${{ matrix.plugin.name }} page
        if: ${{ steps.check_local.outputs.isNew }}
        run: |
          if [ ! -f "docs/_plugins/${{ matrix.plugin.name }}.md" ]; then
            echo --- > "docs/_plugins/${{ matrix.plugin.name }}.md"
            echo layout: plugin >> "docs/_plugins/${{ matrix.plugin.name }}.md"
            echo name: "${{ matrix.plugin.name }}" >> "docs/_plugins/${{ matrix.plugin.name }}.md"
            echo description: "${{ matrix.plugin.description }}" >> "docs/_plugins/${{ matrix.plugin.name }}.md"
            echo tags: "${{ toJson(matrix.plugin.tags) }}" >> "docs/_plugins/${{ matrix.plugin.name }}.md"
            echo versions: "${{ toJson(matrix.plugin.versions) }}" >> "docs/_plugins/${{ matrix.plugin.name }}.md"
            echo image_url: ${{ matrix.plugin.image_url }} >> "docs/_plugins/${{ matrix.plugin.name }}.md"
            echo created: ${{ matrix.plugin.created }} >> "docs/_plugins/${{ matrix.plugin.name }}.md"
            echo updated: ${{ matrix.plugin.updated }} >> "docs/_plugins/${{ matrix.plugin.name }}.md"
            echo 'project_url: ' >> "docs/_plugins/${{ matrix.plugin.name }}.md"
            echo category: Active >> "docs/_plugins/${{ matrix.plugin.name }}.md"
            echo available_in_store: True >> "docs/_plugins/${{ matrix.plugin.name }}.md"
            echo --- >> "docs/_plugins/${{ matrix.plugin.name }}.md"
            echo '{\% assign store = site.data.store | where: "name", page.name | first \%}' >> "docs/_plugins/${{ matrix.plugin.name }}.md"
            echo Generated new ${{ matrix.plugin.name }} page
          fi
      - name: Create temporary ${{ matrix.plugin.name}}.store.md
        run: |
          echo layout: plugin >> "docs/_plugins/${{ matrix.plugin.name}}.store.md"
          echo name: "${{ matrix.plugin.name }}" >> "docs/_plugins/${{ matrix.plugin.name }}.store.md"
          echo description: "${{ matrix.plugin.description }}" >> "docs/_plugins/${{ matrix.plugin.name }}.store.md"
          echo tags: "${{ toJson(matrix.plugin.tags) }}" | sed 's/["\n\r]//g' >> "docs/_plugins/${{ matrix.plugin.name }}.store.md"
          echo versions: "${{ toJson(matrix.plugin.versions) }}" | sed 's/["\n\r]//g'  >> "docs/_plugins/${{ matrix.plugin.name }}.store.md"
          echo image_url: ${{ matrix.plugin.image_url }} >> "docs/_plugins/${{ matrix.plugin.name }}.store.md"
          echo created: ${{ matrix.plugin.created }} >> "docs/_plugins/${{ matrix.plugin.name }}.store.md"
          echo updated: ${{ matrix.plugin.updated }} >> "docs/_plugins/${{ matrix.plugin.name }}.store.md"
          echo 'project_url: ' >> "docs/_plugins/${{ matrix.plugin.name }}.store.md"
          echo category: Active >> "docs/_plugins/${{ matrix.plugin.name }}.store.md"
          echo available_in_store: True >> "docs/_plugins/${{ matrix.plugin.name }}.store.md"
      - name: Fix local metadata for ${{ matrix.plugin.name }} page
        if: ${{ ! steps.check_local.outputs.isNew }}
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            var fs = require('fs')
            let storeData = ''
            let localData = ''
            try {
              storeData = fs.readFileSync('docs/_plugins/${{ matrix.plugin.name }}.store.md', 'utf-8')
              localData = fs.readFileSync('docs/_plugins/${{ matrix.plugin.name }}.md', 'utf-8')
            } catch (err) {
              console.error(err)
            }

            let fileSplit = localData.split('---\n')
            let sMetadata = ""
            let nonMetadata = []
            console.log(`Split local file into parts`)
            if (fileSplit.length >= 3) {
              sMetadata = fileSplit[1]
              nonMetadata = fileSplit.splice(1,1)
            } else {
              nonMetadata = fileSplit
            }
            let metadata = []
            console.log(`Replace old metadata with new metadata`)
            let oldMetadata = sMetadata.split('\n')
            let newMetadata = storeData.split('\n')
            for (let newData of newMetadata) {
              let field = newData.split(":")[0]
              let oldData = oldMetadata.find(data => data.split(":")[0] == field)
              if (field != 'project_url'){
                metadata.push(newData)
                oldMetadata = oldMetadata.filter(data => data != oldData)
              } else if (field == 'project_url'){
                metadata.push(oldData)
                oldMetadata = oldMetadata.filter(data => data != oldData)
              }
            }
            console.log(`Append remaining old metadata`)
            for (let remainingData of oldMetadata) {
              metadata.push(remainingData)
            }
            console.log(metadata)


      # - name: Fix local page metadata
      #   id: update_local
      #   if: ${{ ! steps.check_local.outputs.isNew }}
      #   run: |
      #     tags=$(echo ${{ toJson(matrix.plugins.tags) }})
      #     versions=$(echo ${{ toJson(matrix.plugins.versions) }})
      #     metadata="$(awk 'BEGIN {p=0}; /---/ {p = ! p; next}; p { print }' docs/_plugins/${{ matrix.plugin.name }}.md)"
      #     nonMetadata="$(awk 'BEGIN {p=1}; /---/ {p = ! p; next}; p { print }' docs/_plugins/${{ matrix.plugin.name }}.md)"
      #     oldSha=$(echo "$metadata" | sha256sum | awk '{ print $1 }')
      #     if echo "$metadata" | grep -Fq "description:"; then
      #       metadata=$(echo "$metadata" | sed 's/description:.*/description: '"${{ matrix.plugin.description }}"'/g')
      #     else
      #       metadata=$(echo "$metadata" | sed '3 a description: '"${{ matrix.plugin.description }}")
      #     fi
      #     echo Updated description
      #     if echo "$metadata" | grep -Fq "tags:"; then
      #       metadata=$(echo "$metadata" | sed 's/tags:.*/tags: '"$tags"'/g')
      #     else
      #       metadata=$(echo "$metadata" | sed '4 a tags: '"$tags")
      #     fi
      #     echo Updated tags
      #     if echo "$metadata" | grep -Fq "versions:"; then
      #       metadata=$(echo "$metadata" | sed 's/versions:.*/versions: '"$versions"'/g')
      #     else
      #       metadata=$(echo "$metadata" | sed '5 a versions: '"$versions")
      #     fi
      #     echo Updated versions
      #     if echo "$metadata" | grep -Fq "image_url:"; then
      #       metadata=$(echo "$metadata" | sed 's/image_url:.*/image_url: '"${{ matrix.plugin.image_url }}"'/g')
      #     else
      #       metadata=$(echo "$metadata" | sed '6 a image_url: '"${{ matrix.plugin.image_url }}")
      #     fi
      #     echo updated image_url
      #     if echo "$metadata" | grep -Fq "created:"; then
      #       metadata=$(echo "$metadata" | sed 's/created:.*/created: '"${{ matrix.plugin.created }}"'/g')
      #     else
      #       metadata=$(echo "$metadata" | sed '7 a created: '"${{ matrix.plugin.created }}")
      #     fi
      #     echo Updated created date
      #     if echo "$metadata" | grep -Fq "updated:"; then
      #       metadata=$(echo "$metadata" | sed 's/updated:.*/updated: '"${{ matrix.plugin.updated }}"'/g')
      #     else
      #       metadata=$(echo "$metadata" | sed '8 a updated: '"${{ matrix.plugin.updated }}")
      #     fi
      #     echo Updated last updated date
      #     if ! echo "$metadata" | grep -Fq "package_name:"; then
      #       metadata=$(echo "$metadata" | sed '9 a package_name: ')
      #     fi
      #     if ! echo "$metadata" | grep -Fq "project_url:"; then
      #       metadata=$(echo "$metadata" | sed '10 a project_url: ')
      #     fi
      #     if ! echo "$metadata" | grep -Fq "category:"; then
      #       metadata=$(echo "$metadata" | sed '11 a category: Active')
      #     fi
      #     if ! echo "$metadata" | grep -Fq "available_in_store:"; then
      #       metadata=$(echo "$metadata" | sed '12 a available_in_store: True')
      #     fi
      #     newSha=$(echo "$metadata" | sha256sum | awk '{ print $1 }')
      #     if [ ! "$oldSha" = "$newSha" ]; then
      #       { echo "---"; echo "$metadata"; echo "---"; echo "$nonMetadata"; } > "docs/_plugins/${{ matrix.plugin.name }}.md"
      #       echo "hasChanges=true" >> $GITHUB_OUTPUT
      #       echo "Updating ${{ matrix.plugin.name }}.md metadata"
      #       cat "docs/_plugins/${{ matrix.plugin.name }}.md"
      #     fi
      - name: Upload page artifact
        if: ${{ steps.check_local.outputs.isNew || steps.update_local.outputs.hasChanges }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.plugin.name }}.md
          path: docs/_plugins/${{ matrix.plugin.name }}.md
          

  # create_pr:
  #   needs: update_or_create_pages
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Create or Update Pull Request
  #       if: ${{ steps.update_or_create_pages.outputs.isNew == 'true' }}
  #       uses: gr2m/create-or-update-pull-request-action@v1.10.1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         branch: "workflows-update-store"
  #         commit-message: "chore: update store.json"
  #         auto-merge: merge
  #         labels: automerge
  #         update-pull-request-title-and-body: true
      
